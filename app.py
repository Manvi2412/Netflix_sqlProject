{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "afe731f7-d2a9-414e-bc68-558a237b0241",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import pickle\n",
    "\n",
    "# --- Load model & encoders ---\n",
    "model = pickle.load(open(\"netflix_success_model.pkl\", \"rb\"))\n",
    "encoder = pickle.load(open(\"encoder.pkl\", \"rb\"))\n",
    "feature_columns = pickle.load(open(\"feature_columns.pkl\", \"rb\"))\n",
    "\n",
    "# --- App title ---\n",
    "st.title(\"üé¨ Netflix Show Success Predictor\")\n",
    "st.markdown(\"Predict whether your show will be a **Hit or Not Hit** based on its features!\")\n",
    "\n",
    "# --- User Inputs ---\n",
    "type_option = st.selectbox(\"Type\", [\"Movie\", \"TV Show\"])\n",
    "country_option = st.selectbox(\"Country\", [\"United States\", \"India\", \"United Kingdom\", \"Various\"])\n",
    "release_year = st.number_input(\"Release Year\", 1990, 2025, step=1)\n",
    "cast_count = st.slider(\"Cast Count\", 0, 30, 5)\n",
    "genre_count = st.slider(\"Genre Count\", 1, 5, 2)\n",
    "director_known = st.selectbox(\"Is the Director Known?\", [\"Yes\", \"No\"])\n",
    "imdb_votes = st.number_input(\"IMDb Number of Votes\", 0, 1000000, step=100)\n",
    "\n",
    "# --- Feature engineering ---\n",
    "log_votes = np.log1p(imdb_votes)\n",
    "has_director = 1 if director_known == \"Yes\" else 0\n",
    "\n",
    "release_decade = (release_year // 10) * 10\n",
    "duration_mins = st.slider(\"Duration (in minutes)\", 30, 180, 90)\n",
    "has_known_cast = 1 if cast_count > 0 else 0\n",
    "\n",
    "# --- Construct input DataFrame ---\n",
    "num_features = pd.DataFrame([{\n",
    "    \"release_year\": release_year,\n",
    "    \"cast_count\": cast_count,\n",
    "    \"genre_count\": genre_count,\n",
    "    \"director_known\": has_director,\n",
    "    \"log_votes\": log_votes,\n",
    "    \"duration_mins\": duration_mins,\n",
    "    \"has_known_cast\": has_known_cast\n",
    "}])\n",
    "\n",
    "cat_features = pd.DataFrame([{\n",
    "    \"type\": type_option,\n",
    "    \"country\": country_option,\n",
    "    \"release_decade\": release_decade\n",
    "}])\n",
    "\n",
    "# Encode categorical\n",
    "cat_encoded = encoder.transform(cat_features)\n",
    "cat_df = pd.DataFrame(cat_encoded, columns=encoder.get_feature_names_out(cat_features.columns))\n",
    "\n",
    "# Combine all\n",
    "final_input = pd.concat([num_features, cat_df], axis=1)\n",
    "\n",
    "# Add any missing columns (ensure matching with training features)\n",
    "for col in feature_columns:\n",
    "    if col not in final_input.columns:\n",
    "        final_input[col] = 0\n",
    "\n",
    "# Reorder columns\n",
    "final_input = final_input[feature_columns]\n",
    "\n",
    "# --- Predict ---\n",
    "if st.button(\"Predict Show Success üéØ\"):\n",
    "    prob = model.predict_proba(final_input)[0][1]\n",
    "    result = \"üéâ Hit!\" if prob >= 0.6 else \"‚ùå Not a Hit\"\n",
    "    st.markdown(f\"### Prediction: **{result}**\")\n",
    "    st.write(f\"üìä Probability of Success: `{prob:.2f}`\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "650e8068-9733-4f5a-82b2-771848e47b6b",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d1803742-bd02-4207-8ac6-1b8be59f8a35",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
